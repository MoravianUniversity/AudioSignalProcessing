!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const n=r(1),i=r(2);class a{constructor(t){this.processing=s.WA_XCORR,this.sampleRate=44100,this.setMode(t),this.gccphat=new n.Gccphat(this.sampleRate),this.waxcorr=new i.Waxcorr(this.sampleRate),this.prewhiten=o.NONE}async correlate(t,e){switch(t.length!=e.length&&(t.length>e.length?t=t.slice(0,e.length):e=e.slice(0,e.length)),this.prewhiten){case o.NONE:case o.MEAN_REMOVAL:case o.TREND_REMOVAL:}let r;return new Promise((n,i)=>{switch(this.processing){case s.GCC_PHAT:r=this.gccphat.xcorr(t,e),r=a.normalize(r),n(r);break;case s.WA_XCORR:this.waxcorr.xcorr(t,e).then(t=>{t=a.normalize(t),n(t)}).catch(t=>console.warn("Warning Waxcorr failed, offlineAudioContext not setup.", t));break;default:r=this.gccphat.xcorr(t,e),r=a.normalize(r),n(r)}})}async timeLag(t,e){const r=await this.correlate(t,e);return this.locatePeakIndex(r)}setMode(t){switch(t){case"waxcorr":this.processing=s.WA_XCORR;break;case"gccphat":this.processing=s.GCC_PHAT}}static indexOfMax(t){if(0===t.length)return-1;let e=t[0],r=0;for(var n=1;n<t.length;n++)t[n]>e&&(r=n,e=Math.abs(t[n]));return r}locatePeakIndex(t){let e,r=a.indexOfMax(t),n=0;return(n=this.processing===s.GCC_PHAT?r>Math.floor(t.length/2)?t.length-r:r:r-this.waxcorr.getOffset())>1?(e=a.interpolate(t[n-1],t[n],t[n+1]),e+=n):e=Math.abs(n),e}static interpolate(t,e,r){let n=.5*(t-r)/(t-2*e+r);return(Math.sqrt(n*n*32+1)-1)/(8*n)}static normalize(t){let e=0,r=new Float32Array(t.length);for(let r=0;r<t.length;r++)Math.abs(t[r])>e&&(e=Math.abs(t[r]));for(let n=0;n<t.length;n++)r[n]=t[n]/e;return r}}var s,o;!function(t){t.WA_XCORR="waxcorr",t.GCC_PHAT="gccphat"}(s||(s={})),function(t){t[t.NONE=0]="NONE",t[t.MEAN_REMOVAL=1]="MEAN_REMOVAL",t[t.TREND_REMOVAL=2]="TREND_REMOVAL"}(o||(o={})),window.xcorr=new a(s.WA_XCORR)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Gccphat=class{constructor(t){this.sampleRate=t,this.libmath=window.math,this.winmath=window.Math,window.initPulse||window.math?window.initPulse().then(t=>{this.pulse=t}):console.warn("GCC-PHAT was not setup correctly!")}xcorr(t,e){var r=this.forwardFFT(t),n=this.forwardFFT(e).conj(),a=i.multiply(r,n),s=a.abs(),o=i.divide(a,s),l=this.inverseFFT(o);return window.resXcorrMath=l,l}forwardFFT(t){void 0!==this.activeFFT&&this.free(),this.activeFFT=new this.pulse.fftReal(t.length);var e=this.activeFFT.forward(t);let r=this.extractReal(e),n=this.extractImag(e),a=new i(e.length);return a.setEntire(r,n),a}inverseFFT(t){let e=new Float32Array(2*t.length),r=0,n=0;for(let i=0;i<e.length;i++)i%2==0?(e[i]=t.data[r].re,r++):(e[i]=t.data[n].im,n++);let i=new Float32Array(e.length);return void 0!==this.activeFFT?(i=this.activeFFT.inverse(e),this.free()):console.warn("Error activeFFT not defined on GCC-PHAT handler!"),i}free(){this.activeFFT.dispose(),this.activeFFT=void 0}extractReal(t){if(t.length%2!=0)return new Float32Array(1);let e=new Float32Array(this.winmath.floor(t.length/2)),r=0;for(let n=0;n<t.length;n++)n%2==0&&(e[r]=t[n],r++);return e}extractImag(t){if(t.length%2!=0)return new Float32Array(1);let e=new Float32Array(this.winmath.floor(t.length/2)),r=0;for(let n=0;n<t.length;n++)n%2!=0&&(e[r]=t[n],r++);return e}};class n{constructor(t,e){this.data=window.math.complex(t,e)}}class i{constructor(t){this.length=t,this.data=new Array(t);for(let e=0;e<t;e++)this.data[e]=new n(0,0)}setEntire(t,e){let r=new Array(t.length);for(let n=0;n<t.length;n++)r[n]=window.math.complex(t[n],e[n]);this.data=r,this.length=this.data.length}conj(){let t=new i(this.length);for(let e=0;e<this.length;e++)t.data[e]=window.math.conj(this.data[e]);return t}abs(){let t=new i(this.length);for(let e=0;e<this.length;e++)t.data[e]=window.math.abs(this.data[e]);return t}static multiply(t,e){let r=new i(t.length);for(let n=0;n<t.length;n++)r.data[n]=window.math.multiply(t.data[n],e.data[n]);return r}static divide(t,e){let r=new i(t.length);for(let n=0;n<t.length;n++)r.data[n]=window.math.divide(t.data[n],e.data[n]);return r}}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Waxcorr=class{constructor(t){this.offlineAudio=new n(t)}async calculate(t,e,r){return this.offlineAudio.setupGraph(t,e,r),this.offlineAudio.source0&&this.offlineAudio.source0.start(),this.offlineAudio.offlineAudioCtx?this.offlineAudio.offlineAudioCtx.startRendering():Promise.reject()}async xcorr(t,e){let r=t.length+e.length-1;return this.calculate(t,e,r).then(t=>new Promise(e=>{e(t.getChannelData(0))}))}getOffset(){return this.offlineAudio.getOffset()}};class n{constructor(t){this.reverseOffset=0,this.samplingRate=44100,this.samplingRate=t}getOffset(){return this.reverseOffset}setBiquad(t,e,r,n,i){e.gain.setValueAtTime(r,t.currentTime),e.frequency.setValueAtTime(n,t.currentTime),e.Q.setValueAtTime(i,t.currentTime)}free(){}setupGraph(t,e,r){this.offlineAudioCtx=new OfflineAudioContext(1,r,44100),this.source0=this.offlineAudioCtx.createBufferSource(),this.source1=this.offlineAudioCtx.createBufferSource(),this.convolver=this.offlineAudioCtx.createConvolver(),this.biquad0=this.offlineAudioCtx.createBiquadFilter(),this.buffer0=this.offlineAudioCtx.createBuffer(1,t.length,this.samplingRate),this.buffer1=this.offlineAudioCtx.createBuffer(1,e.length,this.samplingRate),this.buffer0.copyToChannel(t,0),this.buffer1.copyToChannel(e,0),this.source0.buffer=this.buffer0,this.source1.buffer=this.buffer1,Array.prototype.reverse.call(this.source1.buffer.getChannelData(0)),this.reverseOffset=this.buffer1.getChannelData(0).length-1,this.convolver.buffer=this.source1.buffer,this.source0.connect(this.convolver),this.convolver.connect(this.offlineAudioCtx.destination)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,